# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QHeaderView, QFileDialog, QLabel, QProgressBar, QDialog

import requests
import json
import logging

import http.client
import socket

from downloadHelper import downloadMP3, downloadVideo

http.client.HTTPConnection.debuglevel = 1

requestURL = "https://anisongdb.com/api/search_request"
random50URL = "https://anisongdb.com/api/get_50_random_songs"
session = requests.session()

headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0",
    "Content-Type": "application/json",
}

# You must initialize logging, otherwise you'll not see debug output.
logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
requests_log = logging.getLogger("requests.packages.urllib3")
requests_log.setLevel(logging.DEBUG)
requests_log.propagate = True


class QEntryItem(QtWidgets.QTableWidgetItem):
    def __init__(self, entry, *__args):
        super(QEntryItem, self).__init__(*__args)
        self.entry = entry

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        self.setWindowTitle("AnisongDB Downloader")
        self.setFixedSize(792, 592)

        self.tableWidget = QtWidgets.QTableWidget(parent=self)
        self.tableWidget.setGeometry(QtCore.QRect(10, 130, 771, 441))
        self.tableWidget.setVerticalHeaderLabels([])
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setColumnWidth(0, 1)
        self.tableWidget.setHorizontalHeaderLabels(["", "ANN ID", "Anime", "Type", "Song Name", "Artist", "Diff."])
        self.tableWidget.itemChanged.connect(self.entryClicked)
        self.tableWidget.setObjectName("tableWidget")

        self.lineEdit = QtWidgets.QLineEdit(parent=self)
        self.lineEdit.setGeometry(QtCore.QRect(10, 10, 411, 21))
        self.lineEdit.setPlaceholderText("Search by anime...")
        self.lineEdit.returnPressed.connect(self.searchButton)
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 40, 411, 21))
        self.lineEdit_2.setPlaceholderText("Search by song name...")
        self.lineEdit_2.returnPressed.connect(self.searchButton)
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.lineEdit_3 = QtWidgets.QLineEdit(parent=self)
        self.lineEdit_3.setGeometry(QtCore.QRect(10, 70, 411, 21))
        self.lineEdit_3.setPlaceholderText("Search by artist...")
        self.lineEdit_3.returnPressed.connect(self.searchButton)
        self.lineEdit_3.setObjectName("lineEdit_3")

        self.lineEdit_4 = QtWidgets.QLineEdit(parent=self)
        self.lineEdit_4.setGeometry(QtCore.QRect(10, 100, 331, 21))
        self.lineEdit_4.setPlaceholderText("Search by composer...")
        self.lineEdit_4.returnPressed.connect(self.searchButton)
        self.lineEdit_4.setObjectName("lineEdit_4")

        self.checkBox = QtWidgets.QCheckBox(parent=self)
        self.checkBox.setGeometry(QtCore.QRect(430, 10, 101, 21))
        self.checkBox.setText("Partial Match")
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")

        self.checkBox_2 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_2.setGeometry(QtCore.QRect(430, 40, 101, 21))
        self.checkBox_2.setText("Partial Match")
        self.checkBox_2.setChecked(True)
        self.checkBox_2.setObjectName("checkBox_2")

        self.checkBox_3 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_3.setGeometry(QtCore.QRect(430, 70, 101, 21))
        self.checkBox_3.setText("Partial Match")
        self.checkBox_3.setChecked(True)
        self.checkBox_3.setObjectName("checkBox_3")

        self.checkBox_4 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_4.setGeometry(QtCore.QRect(350, 100, 101, 21))
        self.checkBox_4.setText("Partial Match")
        self.checkBox_4.setChecked(True)
        self.checkBox_4.setObjectName("checkBox_4")

        self.checkBox_5 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_5.setGeometry(QtCore.QRect(530, 10, 41, 21))
        self.checkBox_5.setText("OP")
        self.checkBox_5.setChecked(True)
        self.checkBox_5.setObjectName("checkBox_5")

        self.checkBox_6 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_6.setGeometry(QtCore.QRect(530, 40, 40, 21))
        self.checkBox_6.setText("ED")
        self.checkBox_6.setChecked(True)
        self.checkBox_6.setObjectName("checkBox_6")

        self.checkBox_7 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_7.setGeometry(QtCore.QRect(530, 70, 50, 21))
        self.checkBox_7.setText("INS")
        self.checkBox_7.setChecked(True)
        self.checkBox_7.setObjectName("checkBox_7")

        self.checkBox_8 = QtWidgets.QCheckBox(parent=self)
        self.checkBox_8.setGeometry(QtCore.QRect(450, 100, 121, 21))
        self.checkBox_8.setText("Ignore duplicates")
        self.checkBox_8.setChecked(True)
        self.checkBox_8.setObjectName("checkBox_8")

        self.pushButton = QtWidgets.QPushButton(parent=self)
        self.pushButton.setGeometry(QtCore.QRect(700, 10, 81, 25))
        self.pushButton.setText("Search")
        self.pushButton.clicked.connect(self.searchButton)
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(parent=self)
        self.pushButton_2.setGeometry(QtCore.QRect(590, 40, 191, 25))
        self.pushButton_2.setText("Download (MP3)")
        self.pushButton_2.clicked.connect(self.downloadMP3)
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(parent=self)
        self.pushButton_3.setGeometry(QtCore.QRect(687, 70, 94, 25))
        self.pushButton_3.setText("Download (SD)")
        self.pushButton_3.clicked.connect(self.downloadSD)
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(parent=self)
        self.pushButton_4.setGeometry(QtCore.QRect(590, 70, 94, 25))
        self.pushButton_4.setText("Download (HD)")
        self.pushButton_4.clicked.connect(self.downloadHD)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(parent=self)
        self.pushButton_5.setGeometry(QtCore.QRect(590, 100, 94, 25))
        self.pushButton_5.setText("Show selection")
        self.pushButton_5.clicked.connect(self.showSelection)
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(parent=self)
        self.pushButton_6.setGeometry(QtCore.QRect(687, 100, 94, 25))
        self.pushButton_6.setText("Reinitialize")
        self.pushButton_6.clicked.connect(self.reinitializeTable)
        self.pushButton_6.setObjectName("pushButton_6")

        self.comboBox = QtWidgets.QComboBox(parent=self)
        self.comboBox.setGeometry(QtCore.QRect(590, 10, 101, 25))
        self.comboBox.setEditable(False)
        self.comboBox.setCurrentText("")
        self.comboBox.setPlaceholderText("")
        self.comboBox.addItems(["Intersection", "Union"])
        self.comboBox.setObjectName("comboBox")

        self.entryDict = {}

        self.searching = False

    def reinitializeTable(self):
        if self.searching:
            return
        self.searching = True

        self.clearTable()
        self.resizeTable()
        self.entryDict = {}

        self.searching = False

    def downloadHD(self):
        directory = str(QFileDialog.getExistingDirectory(self, "Select download directory"))
        if directory != "":
            downloadVideo(list(self.entryDict.values()), directory, True)

    def downloadSD(self):
        directory = str(QFileDialog.getExistingDirectory(self, "Select download directory"))
        if directory != "":
            downloadVideo(list(self.entryDict.values()), directory, False)

    def downloadMP3(self):
        directory = str(QFileDialog.getExistingDirectory(self, "Select download directory"))
        if directory != "":
            downloadMP3(list(self.entryDict.values()), directory)

    def showSelection(self):
        if self.searching:
            return

        self.searching = True

        self.clearTable()
        for songId in self.entryDict:
            self.addEntryToTable(self.entryDict[songId])
        self.resizeTable()

        self.searching = False

    def entryClicked(self, item):
        if not isinstance(item, QEntryItem) or self.searching:
            return
        if item.checkState() == QtCore.Qt.CheckState.Checked:
            self.entryDict[item.entry["annSongId"]] = item.entry
        else:
            self.entryDict.pop(item.entry["annSongId"], None)

    def resizeTable(self):
        self.tableWidget.resizeColumnsToContents()
        tableWidth = self.tableWidget.width()
        columnsWidth = 0
        for i in range(self.tableWidget.columnCount()):
            columnsWidth += self.tableWidget.horizontalHeader().sectionSize(i)
        scale = tableWidth / columnsWidth
        for i in range(self.tableWidget.columnCount()):
            self.tableWidget.setColumnWidth(i, int(self.tableWidget.horizontalHeader().sectionSize(i) * scale))

    def clearTable(self):
        while self.tableWidget.rowCount() > 0:
            self.tableWidget.removeRow(0)

    def addEntryToTable(self, entry):
        row = self.tableWidget.rowCount()
        self.tableWidget.insertRow(row)

        songId = entry["annSongId"]

        checkbox = QEntryItem(entry)
        checkbox.setFlags(checkbox.flags() | QtCore.Qt.ItemFlag.ItemIsUserCheckable)
        checkbox.setCheckState(
            QtCore.Qt.CheckState.Unchecked if songId not in self.entryDict else QtCore.Qt.CheckState.Checked)

        self.tableWidget.setItem(row, 0, checkbox)
        self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(str(entry["annId"])))
        self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(entry["animeJPName"]))
        self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(entry["songType"]))
        self.tableWidget.setItem(row, 4, QtWidgets.QTableWidgetItem(entry["songName"]))
        self.tableWidget.setItem(row, 5, QtWidgets.QTableWidgetItem(entry["songArtist"]))
        self.tableWidget.setItem(row, 6, QtWidgets.QTableWidgetItem(str(entry["songDifficulty"])))

    def searchButton(self):
        if self.searching:
            return
        self.searching = True

        reqObj = {
            "and_logic": not self.comboBox.currentIndex(),
            "ignore_duplicate": self.checkBox_8.isChecked(),
            "opening_filter": self.checkBox_5.isChecked(),
            "ending_filter": self.checkBox_6.isChecked(),
            "insert_filter": self.checkBox_7.isChecked(),
            "normal_broadcast": True,
            "dub": True,
            "rebroadcast": True,
            "standard": True,
            "instrumental": True,
            "chanting": True,
            "character": True
        }
        if self.lineEdit.text() != "":
            reqObj["anime_search_filter"] = {
                "search": self.lineEdit.text(),
                "partial_match": self.checkBox.isChecked()
            }
        if self.lineEdit_2.text() != "":
            reqObj["song_name_search_filter"] = {
                "search": self.lineEdit_2.text(),
                "partial_match": self.checkBox_2.isChecked()
            }
        if self.lineEdit_3.text() != "":
            reqObj["artist_search_filter"] = {
                "search": self.lineEdit_3.text(),
                "partial_match": self.checkBox_3.isChecked(),
                "group_granularity": 0,
                "max_other_artist": 99
            }
        if self.lineEdit_4.text() != "":
            reqObj["composer_search_filter"] = {
                "search": self.lineEdit_4.text(),
                "partial_match": self.checkBox_4.isChecked(),
                "arrangement": True
            }

        x = session.post(requestURL, json=reqObj, headers=headers)
        data = json.loads(x.text)
        print(data)
        print(len(data))

        self.clearTable()

        for entry in data:
            self.addEntryToTable(entry)

        self.resizeTable()
        self.searching = False

app = QApplication([])

window = MainWindow()
window.show()

app.exec()
